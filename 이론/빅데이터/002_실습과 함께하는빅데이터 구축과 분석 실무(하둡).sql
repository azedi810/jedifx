 
/* ############################################################################
*  빅데이터 쉽게 이해하기
##############################################################################*/

/*****************************************************
*   101.빅데이터 개념 및 성공사례 
******************************************************/
1. 빅데이터의 개념
   - 현재는 상업적 마케팅ㅇ 용어로 변화 
   - 크리,   처리방식(병렬)   :   모두 만족  BIG DATA
   - 분산파일시스템 , 병렬처리 프레임워크 가지 있어야 한다.  
   - 대표적인 시스템 하둡 hadoop 
   
2. 빅데이터란
   - data 의미 : 데이터 다루는 기술 : dbms  주로 rdbms
   - 데이터 저장 검색 수정 삭제 
   - crud  : retrieve(검색)  주로 테이블 레코드 형태로 관리 
      - R : 데이터의 빠른 검색을 중심으로 최적화되어 있다.  데이터 변경보다 검색의 빈도가 압도적으로 많다.
        index 외 같은 보조 자료구조를 이미 만들어두고 검색에 사용해 검속 속도를 높인다. 
   
3. RDBMS   와  NoSQL 비교
    - DBMS 빠른 읽기 최적화  index 수정
    - NoSQL 등장 : 빠른 쓰기 최적
    - 하지만 양쪽 다 데이터가 커지는 경우 특수한 처리 필요 : 수십테라가 넘는 경우
    - 빅데이터는 일반적인 파일로 관리 (키/밸류 방식)
    
4. 빅데이터와 DBMS/NoSQL 차이점
   -  Big 의미 : 크기 
   - 일반 DBMS  : Large 데이터 다툼
   - Very Large DB  :  VLDB  : 조인이 거의 안됨 ,  역정규화 (Denormalize)  저장양이 많다   
       : 파티셔닝, 샤딩, 복제   -->  
       : 정규화 (데이터 중복 방지)
  - Big Data  :  VLDB 보다 크다  , 서버 수십대, 수백대, 수천대  , 데이터 분산 저장
      - 일반 DBMS 로 처리하려면 엄청난 비용 
      - 수십테라 이상 
      - 일반적인 DBMS 처리 못하는 것들
      - 서버 한 대로 처리할 수 없는 규모의 데이터  ( 예  10TB 쇼팅 1대 서버)
      - 기존 소프트웨어로 처리할 수 없는 규모의 데이터 
           
5. 빅데이터 성공 사례 
  - 데이터마이닝 :  넷플릭스 사례(영화 추천, 고객 만족도 높다, 영화카테고리, 배우 등)
      , 페이스북, 트위터
      , 월마트(상황 분석, 물건간의 상황, 주말-맥주 등  분석해서 동선 판매 위치 변경 성공)
  - 제일 문제는 데이터 :  데이터 주로 소유가 있음 : 자유롭게 유통 되지 않음
  - 작은 비용을 분석
  - 거의 유료가 없고, 오픈소스라 별다른 비용이 들지 않음 
  
   빅데이터 기술의 핵심은 여러 개의 시스템을 묶는 빅파일시스템인 HDFS (하둡시스템)와 분산처리 프레임워크인 맵리듀스(MapReduce)라고 할 수 있습니다
   멀티코어 시스템에서 여러 개의 코어를 활용하려면 멀티스레드 프로그래밍을 해야 합니다.
   이 방법은 하느이 코어만 사용하는 일반 프로그래밍보다 훨씬 복잡합니다.
   동기화라고 부르는 기술에 대한 이해가 필수 
   더욱이 데드락 deadlock 이라고 부르는 현상을 잡기는 굉장히 힘듬
   이를 DBMS에서 트랜잭션의 격리 isolation 라는 무제로 다룹니다.
   하지만 멀티스레드 프로그래밍을 하더라도 하나의 시스템의 범주를 벗어나기 흠듭니다.
   여러대의 시스템에 작업을 나누어주고 이를 취합하는 기술은 나이도가 괴장히 높습니다.
   그리고 일단 처리대상 데이터를 저장해야하는데 이를 분산저장하는 기술도 쉽지 않습니다
   즉 하둡의 핵심기술인 HDFS와 맵리듀스는 일반적인 개발가 다루기는 굉장히 복잡
   합둡은  개발자는 단진 HDFS 파일을 업로드 , 맵리듀스 작업에 대한 클래스만 프로그래밍해주면 됨 
   하둡은 오픈소스기술로 별도의 비용없이 사용, 
   초기에는 작게 시작했다가 시스템이 더 필요하면 간단한 작업으로 계속 스케일을 키울 수 있다 .
   
   
/*****************************************************
* 빅데이터 프레임워크 - 하둡 개요 및 아키텍처
******************************************************/
 1. 하둡의 역사
   - 더그 커팅  : 하둡의 아버지 , 루씬 제작자(검색엔진용 오픈 소스) . 구급의 연감을 갖고 시작
   - 2003 : the google file system 논문 
   - mapreduce : 2004 : simplified data processing on large cluster    논문
   - 2006년 부터 제작 : apache top level project
   - 야후에 취직 -> 클라우데라로 이직
   - GFS ->HDFS ,   MapReduce -> MapReduce 
   - 노란색 코끼리 
   - Hadoop, Mahout(코끼리를 모는 사람), Oozie, Horton 
   
2. 하둡의 기초 사항
  - JAVA 로 만듦
  - 유닉스 기반, 리눅스 중 우분투 기반으로 수업 진행
  - 배포판 : apache hadoop, CDH (믈라우데라판),  HDP (호튼웍스판)
  - 빅 3회사  : apache 재단  하둡 표준,  클라우데라(claudera : 가장크다)
                    호튼윅스(hortonworks) 야후 퇴사 후 
 3. 하둡의 특징
   - 오픈소스 , github 
   - 데이터가 있는 곳으로 코드를 이동
   - scale out  : 병렬 처리 ...서버를 하나씩 증가하는 방식 
   - 병렬처리를 가능하게 하는 단순한 데이터 모델
   - 오프라인 배치 프로세싱에 최적화 :  실시간 처리 안됨 
   
4. 하둡 아키텍처
  - 하둡  :    HDFS + MapReduce 
  - 빅파일시스템 HDFS  (Hadoop File System)
       - 네임노드(마스터) / 테이터노드 (슬레이브)  
           - 세컨더리 네임노드 : SPOF (single point of failure) 문제
   - 분산처리 프레임워크 : MapReduce
           - 잡트래커(마스터) / 태스트래커(슬레이브)
   
/*****************************************************
* 빅데이터 프레임워크 - 하둡 설치 및 준비사항(환경설정) 
******************************************************/
   
   
/*****************************************************
* 빅데이터 프레임워크 - 하둡2 아키텍처 개선사항 및 설치
******************************************************/
   
   
/*****************************************************
* 빅데이터 프로그래밍 - 빅데이터 예제 분석
******************************************************/
   
   
/*****************************************************
* 빅데이터 프로그래밍 - 하둡 결과물 후처리 및 워크플로우
******************************************************/
   
   
/*****************************************************
* 빅데이터 에코시스템(웹서버, RDBMS) - FLUME, SQOOP
******************************************************/
   
   
/*****************************************************
* 빅데이터 에코시스템(쿼리, NoSQL) - HIVE, HBASE
******************************************************/
   
   
/*****************************************************
* 경량 분산처리 프레임워크-스파크 아키텍처 및 프로그래밍
******************************************************/
   
   
/*****************************************************
* 빅데이터와 컨테이너 기반 가상화 - 도커기반의 하둡
******************************************************/
   








